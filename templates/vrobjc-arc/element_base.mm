<%
FULL_NAME_CAPS = "_"..string.upper(this.namespace).."_"..string.upper(this.name).."BASE".."_";
CAP_NAME = capitalizedString(this.name);
FULL_NAME_CAMEL = capitalizedString(this.namespace).."_"..capitalizedString(this.name).."Base";
%>//
// Autogenerated by gaxb at <%= os.date("%I:%M:%S %p on %x") %>
//

#import "<%= FULL_NAME_CAMEL %>.h"
#import "<%= capitalizedString(this.namespace) %>_XMLLoader.h"
<% -- check for ENUMs defined in other namespaces and load their XMLLoaders as needed
local namespaces = {};
for k,v in pairs(this.attributes) do
	if (isEnumForItem(v) and v.type.namespace ~= nil and v.type.namespace ~= this.namespace and namespaces[v.type.namespace] == nil) then
		namespaces[v.type.namespace] = true;
		gaxb_print("#import \""..v.type.namespace.."_XMLLoader.h\"\n");
	end
end
%>
<% function getStringValueForOverrideOnWriteOption(option, obj)
    if (obj == nil) then
        obj = this;
    end
    local appinfo = gaxb_xpath(obj.xml, "./XMLSchema:annotation/XMLSchema:appinfo/XMLSchema:overrideOnWrite");
    if(appinfo ~= nil) then
        --print(table.tostring(appinfo));
        local attrs = appinfo[1].attributes;
        if(attrs ~= nil) then
            local str = attrs[option];
            if (str ~= nil) then
                str = string.gsub( str, "[\"\\\']", "\\%1" );
            end
            return str;
        end
    end
end %>

@interface NSData (NSDataAdditions)

+ (NSString *) encode:(NSData *) rawBytes;
+ (NSString *) encode:(const uint8_t *) input length:(NSInteger) length;
+ (NSData *) decode:(const char *) string length:(NSInteger) inputLength;
+ (NSData *) decode:(NSString *) string;

@end

@implementation <%= FULL_NAME_CAMEL %>
<% if (hasSuperclass(this) == false) then %>
@synthesize parent;
@synthesize uid;
@synthesize originalValues;

- (id) gaxb_init { return self; }
- (void) gaxb_dealloc {  }
- (void) gaxb_loadDidComplete {  }
- (void) gaxb_valueWillChange: (NSString *)_name {  }
- (void) gaxb_valueDidChange: (NSString *)_name {  }
<% end %>
- (id) init 
{
	if ((self = [super init])) 
	{
		if (!gaxb_init_called)
		{
			gaxb_init_called=YES;
			[self gaxb_init];
		}
		
		if(!originalValues)
		{
			originalValues = [NSMutableDictionary dictionary];
		}
		
		<%
		for k,v in pairs(this.sequences) do
			if (v.name == "any") then %>	
		if(!anys)
		{
			anys = [NSMutableArray array];
		}<%
			elseif(isPlural(v)) then %>
		<%= pluralName(v.name) %> = [NSMutableArray array];<%	
			end	
		end 
		for k,v in pairs(this.attributes) do
			if (v.default ~= nil) then %>
		[self set<%= capitalizedString(v.name) %>WithString: @"<%= v.default %>"]; <%
			end
		end
%>
	}
	
	return self;
}

- (void) dealloc 
{
	originalValues = nil;
	
	if (!gaxb_dealloc_called)
	{
		gaxb_dealloc_called = YES;
		[self gaxb_dealloc];
	}
	
<%
	for k,v in pairs(this.attributes) do
		if (isObject(v)) then
			gaxb_print("\t"..v.name.." = nil;\n")
		end
	end
	for k,v in pairs(this.sequences) do
		if (v.name == "any") then
			gaxb_print("\tanys=nil;\n")
		elseif(isPlural(v)) then
			gaxb_print("\t"..pluralName(v.name).."=nil;\n")
		else
			gaxb_print("\t"..v.name.."=nil;\n")
		end
	end
%>
}

- (NSDictionary *) validAttributes
{
	NSMutableDictionary* validAttributes = [NSMutableDictionary dictionaryWithObjectsAndKeys:
<%

	for k,v in pairs(this.attributes) do
		--printAllKeys(v)
		gaxb_print("\t\t\t@\""..simpleTypeForItem(v).."\", @\""..v.name.."\",\n")
	end
	if (this.mixedContent) then
		gaxb_print("\t\t\t@\"string\", @\"MixedContent\",\n");
	end
	for k,v in pairs(this.sequences) do
		if (v.name == "any") then
			gaxb_print("\t\t\t@\"any[]\", @\"anys\",\n")
		elseif(isPlural(v)) then
			gaxb_print("\t\t\t@\""..simpleTypeForItem(v).."[]\", @\""..pluralName(v.name).."\",\n")
		else
	 		gaxb_print("\t\t\t@\""..simpleTypeForItem(v).."\", @\""..v.name.."\",\n")
		end
	end
%>			nil];
	<% if (hasSuperclass(this) == true) then %>
	[validAttributes addEntriesFromDictionary:[super validAttributes]];
	<% end %>
	return validAttributes;
}

#ifdef ANDROID
- (void) setValue:(id)_value forKey:(NSString *)_key 
{
 	if([_value isKindOfClass:[NSString class]]) 
	{
<%
		for k,v in pairs(this.attributes) do
			--printAllKeys(v)
			gaxb_print("\t\tif([_key isEqual:@\""..v.name.."\"]) { [self set"..capitalizedString(v.name).."WithString:_value]; return; }\n")
		end
%>
    	SEL selector = NSSelectorFromString([NSString stringWithFormat:@"set%@WithString:", [_key capitalizedString]]);
		[self performSelector:selector withObject:_value]; 
		return;
  	}

	[super setValue:_value forKey:_key];
}
#endif

- (void) setValue:(id)value forUndefinedKey:(NSString *)key { }

<%
	for k,v in pairs(this.attributes) do
		local capName = capitalizedString(v.name);
%>
@synthesize <%= v.name %>;
@synthesize <%= v.name %>Exists;<%
if (isObject(v)) then  %>
- (void) set<%= capName %>:(<% if (v.type == "string") then gaxb_print("NSString *") else gaxb_print(typeForItem(v)) end %>)v 
{<% if (typeForItem(v) ~= "NSString *") then %>
	if([v isKindOfClass:[NSString class]]) 
		return [self set<%= capName %>WithString:(NSString *)v];
	<% end %>
	
	<%= v.name %>Exists=YES; <%
	if  (v.type == "string") then %>
	if ([v isKindOfClass:[NSString class]] == NO) 
	{ 
		v = [v description]; 
	} <%
	end %>
	[self gaxb_valueWillChange:@"<%= v.name %>"]; 
	[self willChangeValueForKey:@"<%= v.name %>AsString"]; 
	<%= v.name %> = v;
	[self didChangeValueForKey:@"<%= v.name %>AsString"]; 
	[self gaxb_valueDidChange:@"<%= v.name %>"]; 
}<%
else %>
- (void) set<%= capName %>:(<%= typeForItem(v) %>)v 
{ 
	<%= v.name %>Exists=YES;
	[self gaxb_valueWillChange:@"<%= v.name %>"]; 
	[self willChangeValueForKey:@"<%= v.name %>AsString"]; 
	<%= v.name %> = v; 
	[self didChangeValueForKey:@"<%= v.name %>AsString"]; 
	[self gaxb_valueDidChange:@"<%= v.name %>"]; 
}
<%if (isEnumForItem(v) == false) then%>
- (void) set<%= capName %>WithObject:(<%= OBJECTMAP[typeNameForItem(v)] %>)v 
{ 
<%	if (typeNameForItem(v)=="BOOL") then %>
	<%= v.name %>Exists=YES; 
	[self gaxb_valueWillChange:@"<%= v.name %>"]; 
	[self willChangeValueForKey:@"<%= v.name %>AsString"]; 
	<%= v.name %> = [v boolValue]; 
	[self didChangeValueForKey:@"<%= v.name %>AsString"]; 
	[self gaxb_valueDidChange:@"<%= v.name %>"];
<% elseif (typeNameForItem(v)=="float") then %>
	<%= v.name %>Exists=YES; 
	[self gaxb_valueWillChange:@"<%= v.name %>"]; 
	[self willChangeValueForKey:@"<%= v.name %>AsString"]; 
	<%= v.name %> = [v floatValue]; 
	[self didChangeValueForKey:@"<%= v.name %>AsString"]; 
	[self gaxb_valueDidChange:@"<%= v.name %>"];
<% elseif (typeNameForItem(v)=="short") then %>
	<%= v.name %>Exists=YES; 
	[self gaxb_valueWillChange:@"<%= v.name %>"]; 
	[self willChangeValueForKey:@"<%= v.name %>AsString"]; 
	<%= v.name %> = [v shortValue]; 
	[self didChangeValueForKey:@"<%= v.name %>AsString"]; 
	[self gaxb_valueDidChange:@"<%= v.name %>"];
<% elseif (typeNameForItem(v)=="int") then %>
	<%= v.name %>Exists=YES; 
	[self gaxb_valueWillChange:@"<%= v.name %>"]; 
	[self willChangeValueForKey:@"<%= v.name %>AsString"]; 
	<%= v.name %> = [v intValue]; 
	[self didChangeValueForKey:@"<%= v.name %>AsString"]; 
	[self gaxb_valueDidChange:@"<%= v.name %>"];
<% elseif (typeNameForItem(v)=="long") then %>
	<%= v.name %>Exists=YES; 
	[self gaxb_valueWillChange:@"<%= v.name %>"]; 
	[self willChangeValueForKey:@"<%= v.name %>AsString"]; 
	<%= v.name %> = [v intValue]; 
	[self didChangeValueForKey:@"<%= v.name %>AsString"]; 
	[self gaxb_valueDidChange:@"<%= v.name %>"];
<% elseif (typeNameForItem(v)=="double") then %>
	<%= v.name %>Exists=YES; 
	[self gaxb_valueWillChange:@"<%= v.name %>"]; 
	[self willChangeValueForKey:@"<%= v.name %>AsString"]; 
	<%= v.name %> = [v doubleValue]; 
	[self didChangeValueForKey:@"<%= v.name %>AsString"]; 
	[self gaxb_valueDidChange:@"<%= v.name %>"];
<% elseif (typeNameForItem(v)=="char") then %>
	<%= v.name %>Exists=YES; 
	[self gaxb_valueWillChange:@"<%= v.name %>"]; 
	[self willChangeValueForKey:@"<%= v.name %>AsString"]; 
	<%= v.name %> = [v intValue]; 
	[self didChangeValueForKey:@"<%= v.name %>AsString"]; 
	[self gaxb_valueDidChange:@"<%= v.name %>"];
<% elseif (isEnumForItem(v)) then %>
	<%= v.name %>Exists=YES; 
	[self gaxb_valueWillChange:@"<%= v.name %>"]; 
	[self willChangeValueForKey:@"<%= v.name %>AsString"]; 
	<%= v.name %> = [v intValue]; 
	[self didChangeValueForKey:@"<%= v.name %>AsString"]; 
	[self gaxb_valueDidChange:@"<%= v.name %>"];
<% else %>
	// bleh 
<% end %>
}
- (id) <%= v.name %>AsObject
{ 
<%	if (typeNameForItem(v)=="BOOL") then %>
	return [NSNumber numberWithBool:<%= v.name %>];
<% elseif (typeNameForItem(v)=="float") then %>
	return [NSNumber numberWithFloat:<%= v.name %>];
<% elseif (typeNameForItem(v)=="short") then %>
	return [NSNumber numberWithShort:<%= v.name %>];
<% elseif (typeNameForItem(v)=="int") then %>
	return [NSNumber numberWithInt:<%= v.name %>];
<% elseif (typeNameForItem(v)=="long") then %>
	return [NSNumber numberWithLong:<%= v.name %>];
<% elseif (typeNameForItem(v)=="double") then %>
	return [NSNumber numberWithFloat:<%= v.name %>];
<% elseif (typeNameForItem(v)=="char") then %>
	return [NSNumber numberWithInt:<%= v.name %>];
<% elseif (isEnumForItem(v)) then %>
	return [NSNumber numberWithInt:<%= v.name %>];
<% else %>
	// bleh 
<% end %>
}<% end %><%
end %>	
- (NSString *) <%= v.name %>AsString {<%
if (typeNameForItem(v)=="BOOL") then
	%> return ((<%= v.name %>Exists) ? (<%= v.name %> ? @"true" : @"false") : nil); <%
elseif (typeNameForItem(v)=="float") then 
	%> return ((<%= v.name %>Exists) ? [[NSNumber numberWithFloat:<%= v.name %>] stringValue] : nil); <%
elseif (typeNameForItem(v)=="short") then 
	%> return ((<%= v.name %>Exists) ? [[NSNumber numberWithShort:<%= v.name %>] stringValue] : nil); <%
elseif (typeNameForItem(v)=="int" or isEnumForItem(v)) then
	%> return ((<%= v.name %>Exists) ? [[NSNumber numberWithInt:<%= v.name %>] stringValue] : nil); <%
elseif (typeNameForItem(v)=="long") then
	%> return ((<%= v.name %>Exists) ? [[NSNumber numberWithLong:<%= v.name %>] stringValue] : nil); <%
elseif (typeNameForItem(v)=="double") then
	%> return ((<%= v.name %>Exists) ? [[NSNumber numberWithDouble:<%= v.name %>] stringValue] : nil); <%
elseif (typeNameForItem(v)=="char") then 
	%> return ((<%= v.name %>Exists) ? [[NSNumber numberWithChar:<%= v.name %>] stringValue] : nil); <%
elseif (typeNameForItem(v)=="date") then 
	%> return [self dateStringFromSchema:<%= v.name %>]; <%
elseif (typeNameForItem(v)=="dateTime") then
	%> return [self dateTimeStringFromSchema:<%= v.name %>]; <%
elseif (typeNameForItem(v)=="base64Binary") then
	%> return [<%= v.name %> base64Encoding]; <%
else
	%> return [<%= v.name %> description]; <%
end %>}
- (void) set<%= capName %>WithString:(NSString *)string 
{ 	
	<%= v.name %>Exists=YES; <%	
if (typeNameForItem(v)=="BOOL") then %>
	[self set<%= capName %>:(([string isEqualToString:@"true"] || [string isEqualToString:@"1"]) ? YES : NO)];
<% elseif (typeNameForItem(v)=="float") then %>
	[self set<%= capName %>:[string floatValue]];
<% elseif (typeNameForItem(v)=="short") then %>
	[self set<%= capName %>:[string shortValue]];
<% elseif (typeNameForItem(v)=="int") then %>
	[self set<%= capName %>:[string intValue]];
<% elseif (typeNameForItem(v)=="long") then %>
	[self set<%= capName %>:[string intValue]];
<% elseif (typeNameForItem(v)=="double") then %>
	[self set<%= capName %>:[string doubleValue]];
<% elseif (typeNameForItem(v)=="char") then %>
	[self set<%= capName %>:[string intValue];
<% elseif (v.type=="date") then %>
	[self set<%= capName %>:[self schemaDateFromString:string]]; 
<% elseif (v.type=="dateTime") then %>
	[self set<%= capName %>:[self schemaDateTimeFromString:string]]; 
<% elseif (v.type=="base64Binary") then %>
	[self set<%= capName %>:[NSData decode:string]]; 
<% elseif (v.type=="string") then %>
	[self set<%= capName %>:string]; 
<% elseif (isEnumForItem(v)) then %>
	[self set<%= capName %>:(<%= v.type.name %>)([[string stringByTrimmingCharactersInSet:[NSCharacterSet decimalDigitCharacterSet]] length] == 0 ? 
		[string intValue] : [[<%= capitalizedString(v.type.namespace).."_XMLLoader arrayForEnum"..capitalizedString(v.type.name) %>] indexOfObject:string])];
<% elseif (isObject(v)) then %>
	[self set<%= capName %>:[[NSClassFromString(@"<%= typeNameForItem(v) %>") alloc] initWithString:string]]; 
<% else %>
	// bleh 
<% end 
%>}

<%
	end
	if (this.mixedContent) then %>
@synthesize MixedContent;
@synthesize MixedContentExists;
-(void) setMixedContent:(NSString *)v 
{ 
    MixedContentExists=YES; 
    if([v isKindOfClass:[NSString class]] == NO) 
    { 
        v = [v description]; 
    } 
    [self gaxb_valueWillChange:@"MixedContent"]; 
    [self willChangeValueForKey:@"MixedContentAsString"]; 
    MixedContent = v; 
    [self didChangeValueForKey:@"MixedContentAsString"]; 
    [self gaxb_valueDidChange:@"MixedContent"]; 
};
- (NSString *) MixedContentAsString { return [MixedContent description]; }
- (void) setMixedContentWithString:(NSString *)string 
{ 
	MixedContentExists=YES; 
	[self setMixedContent:[[NSClassFromString(@"NSString") alloc] initWithString:string]]; 
}
<%
	end
	for k,v in pairs(this.sequences) do
		if (v.name == "any") then
%>@synthesize anys;
- (void) appendAnyWithString:(NSString *)string 
{ 
	// does this make sense?
	[anys addObject:[[NSClassFromString(@"any") alloc] initWithString:string]]; 
}
<%		elseif(isPlural(v)) then %>
@synthesize <%= pluralName(v.name) %>;<%
		else %>
@synthesize <%= v.name %>;
@synthesize <%= v.name %>Exists;<%
			if (isObject(v)) then %>
- (void) set<%= capitalizedString(v.name) %>:(<%= typeForItem(v) %>)v
{
	<%= v.name %>Exists=YES;
	[self gaxb_valueWillChange:@"<%= v.name %>"]; 
	[self willChangeValueForKey:@"<%= v.name %>AsString"]; 
	<%= v.name %> = v;
	[self didChangeValueForKey:@"<%= v.name %>AsString"]; 
	[self gaxb_valueDidChange:@"<%= v.name %>"]; 
};
<%         end
     local capName = capitalizedString(v.name); %>
- (void) set<%= capName %>WithString:(NSString *)string
{
    <% if (not isObject(v)) then %>
    <%= v.name %>Exists=YES;
    [self gaxb_valueWillChange:@"<%= v.name %>"];
	[self willChangeValueForKey:@"<%= v.name %>AsString"]; <% end
    if (typeNameForItem(v)=="BOOL") then %>
        [self set<%= capName %>:(([string isEqualToString:@"true"] || [string isEqualToString:@"1"]) ? YES : NO)];
    <% elseif (typeNameForItem(v)=="float") then %>
    [self set<%= capName %>:[string floatValue]];
    <% elseif (typeNameForItem(v)=="short") then %>
    [self set<%= capName %>:[string shortValue]];
    <% elseif (typeNameForItem(v)=="int") then %>
    [self set<%= capName %>:[string intValue]];
    <% elseif (typeNameForItem(v)=="long") then %>
    [self set<%= capName %>:[string intValue]];
    <% elseif (typeNameForItem(v)=="double") then %>
    [self set<%= capName %>:[string doubleValue]];
    <% elseif (typeNameForItem(v)=="char") then %>
    [self set<%= capName %>:[string intValue];
     <% elseif (v.type=="date") then %>
     [self set<%= capName %>:[self schemaDateFromString:string]];
     <% elseif (v.type=="dateTime") then %>
     [self set<%= capName %>:[self schemaDateTimeFromString:string]];
     <% elseif (v.type=="base64Binary") then %>
     [self set<%= capName %>:[NSData decode:string]];
     <% elseif (v.type=="string") then %>
     [self set<%= capName %>:string];
     <% elseif (isEnumForItem(v)) then %>
     [self set<%= capName %>:(<%= v.type.name %>)([[string stringByTrimmingCharactersInSet:[NSCharacterSet decimalDigitCharacterSet]] length] == 0 ?
                                                  [string intValue] : [[<%= capitalizedString(v.type.namespace).."_XMLLoader arrayForEnum"..capitalizedString(v.type.name) %>] indexOfObject:string])];
     <% elseif (isObject(v)) then %>
     [self set<%= capName %>:[[NSClassFromString(@"<%= typeNameForItem(v) %>") alloc] initWithString:string]]; 
     <% else %>
     // bleh 
     <% end 
 %>
     <% if (not isObject(v)) then %>
     [self didChangeValueForKey:@"<%= v.name %>AsString"];
     [self gaxb_valueDidChange:@"<%= v.name %>"];
     <% end %>
}
<%

		end
	end
    
%>

- (void) appendXMLAttributesForSubclass:(NSMutableString *)xml
{
	[self appendXMLAttributesForSubclass:xml useOriginalValues:false];
}


- (void) appendXMLAttributesForSubclass:(NSMutableString *)xml useOriginalValues:(BOOL)useOriginalValues
{
<% if (hasSuperclass(this)) then %>	[super appendXMLAttributesForSubclass:xml useOriginalValues:useOriginalValues];
<% end
for k,v in pairs(this.attributes) do
    local castBoolToInt = getStringValueForOverrideOnWriteOption("castBoolToInt", v);
    local boolTrue = '@"true"';
    local boolFalse = '@"false"';
    if (castBoolToInt == "true" or castBoolToInt == "1") then
        boolTrue = '@"1"';
        boolFalse = '@"0"';
    end
    local vName = uncleanedName(v.name);
	if (typeNameForItem(v) == "BOOL") then
%>	if (!useOriginalValues && (<%= v.name %>Exists || <%= v.name %> )) { [xml appendFormat:@" <%= vName %>='%@'", SAFESTRING(((<%= v.name %>Exists || <%= v.name %> ) ? (<%= v.name %> ? <%= boolTrue %> : <%= boolFalse %>) : NULL))]; }
<% elseif (typeNameForItem(v)=="short") then %>
	if (!useOriginalValues && (<%= v.name %>Exists || <%= v.name %> )) { [xml appendFormat:@" <%= vName %>='%hi'", <%= v.name %>]; }
<% elseif (typeNameForItem(v)=="int" or isEnumForItem(v)) then %>
	if (!useOriginalValues && (<%= v.name %>Exists || <%= v.name %> )) { [xml appendFormat:@" <%= vName %>='%i'", <%= v.name %>]; }
<% elseif (typeNameForItem(v)=="long") then %>
	if (!useOriginalValues && (<%= v.name %>Exists || <%= v.name %> )) { [xml appendFormat:@" <%= vName %>='%ld'", <%= v.name %>]; }
<% elseif (typeNameForItem(v)=="char") then %>
	if (!useOriginalValues && (<%= v.name %>Exists || <%= v.name %> )) { [xml appendFormat:@" <%= vName %>='%i'", <%= v.name %>]; }
<% elseif (typeNameForItem(v)=="float" or typeNameForItem(v)=="double") then %>
	if (!useOriginalValues && (<%= v.name %>Exists || <%= v.name %> )) 
	{ 
		NSString *s = [NSString stringWithFormat:@"%f", <%= v.name %>];
		[xml appendFormat:@" <%= vName %>='%@'", s]; 
	}
<% elseif (v.type=="date") then %>
	if (!useOriginalValues && (<%= v.name %>Exists || <%= v.name %> )) { [xml appendFormat:@" <%= vName %>='%@'", [self dateStringFromSchema:<%= v.name %>]]; }
<% elseif (v.type=="dateTime") then %>
	if (!useOriginalValues && (<%= v.name %>Exists || <%= v.name %> )) { [xml appendFormat:@" <%= vName %>='%@'", [self dateTimeStringFromSchema:<%= v.name %>]]; }
<% elseif (v.type=="base64Binary") then %>
	if (!useOriginalValues && (<%= v.name %>Exists || <%= v.name %> )) { [xml appendFormat:@" <%= vName %>='%@'", [<%= v.name %> base64Encoding]]; }
<% elseif (v.type=="string") then %>
	if (!useOriginalValues && (<%= v.name %>Exists || <%= v.name %> )) { [xml appendFormat:@" <%= vName %>='%@'", SAFESTRING(<%= v.name %>)]; }
<% 	else %>	if (!useOriginalValues && (<%= v.name %>Exists || <%= v.name %>)) { [xml appendFormat:@" <%= vName %>='%@'", SAFESTRING([<%= v.name %> description])]; }
<%	end %>
	else if([[self valueForKey:@"originalValues"] valueForKey:@"<%= v.name %>"]) { [xml appendFormat:@" <%= vName %>='%@'", SAFESTRING([[[self valueForKey:@"originalValues"] valueForKey:@"<%= v.name %>"] description])]; }

<%end
%>

}

- (void) appendXMLElementsForSubclass:(NSMutableString *)xml
{
	[self appendXMLElementsForSubclass:xml useOriginalValues:false];
}

- (void) appendXMLElementsForSubclass:(NSMutableString *)xml useOriginalValues:(BOOL)useOriginalValues
{
<%
    local cdataOpenTag = "<![CDATA[";
    local cdataCloseTag = "]]>";
    
    local cdataContent = getStringValueForOverrideOnWriteOption("cdataContent");
    local cdataize = false;
    if (cdataContent == "true" or cdataContent == "1") then
        cdataize = true;
    end;
    
    if (this.mixedContent) then
        if (cdataize) then
            %>[xml appendFormat:@"<%= cdataOpenTag%>%@<%= cdataCloseTag%>", MixedContent];<%
        else
            %>[xml appendFormat:@"%@", SAFESTRING(MixedContent)];<%
        end
    end %>
<% if (hasSuperclass(this)) then %>	[super appendXMLElementsForSubclass:xml useOriginalValues:useOriginalValues];
<% end
for k,v in pairs(this.sequences) do
-- print(table.tostring(v))
    local overrideTag = getStringValueForOverrideOnWriteOption("tag", v);
    local lowercaseTag = getStringValueForOverrideOnWriteOption("lowercaseTag", v);
    local addAttribute = getStringValueForOverrideOnWriteOption("addAttribute", v);
    local cdataContent = getStringValueForOverrideOnWriteOption("cdataContent", v);
    local castBoolToInt = getStringValueForOverrideOnWriteOption("castBoolToInt", v);
    
    local vName = uncleanedName(v.name);
    local elementTag = vName;
    if (overrideTag ~= nil) then
        elementTag = overrideTag;
    end
    local cdataize = false;
    local cdataizeOpen = "";
    local cdataizeClose = "";
    if (cdataContent == "true" or cdataContent == "1") then
        cdataize = true;
        cdataizeOpen = cdataOpenTag;
        cdataizeClose = cdataCloseTag;
    end;

    if (lowercaseTag == "true" or lowercaseTag == "1") then
        elementTag = string.lower(elementTag);
    end;
    local addAttrTxt = "";
    if (addAttribute ~= nil) then
        addAttrTxt = " "..addAttribute;
    end
    local boolTrue = '@"true"';
    local boolFalse = '@"false"';
    if (castBoolToInt == "true" or castBoolToInt == "1") then
        boolTrue = '@"1"';
        boolFalse = '@"0"';
    end

	if (v.name == "any") then 
%>
	FAST_ENUMERATION(x,anys) { [x appendXML:xml useOriginalValues:useOriginalValues]; } 
<%	elseif (v.ref ~= nil) then 
		if (isPlural(v)) then
%>	FAST_ENUMERATION(x,<%= pluralName(v.name) %>) { [x appendXML:xml useOriginalValues:useOriginalValues]; } 
<% 		else
%>	[<%= v.name %> appendXML:xml];<%
	  	end
	elseif (isPlural(v)) then 
%>	FAST_ENUMERATION(x,<%= pluralName(v.name) %>) { [xml appendFormat:@"<<%= vName %><%= addAttrTxt %>><%= cdataizeOpen%>%@<%= cdataizeClose%></<%= vName %>>", SAFESTRING(x)]; }
<%	elseif (typeNameForItem(v) == "BOOL") then
%>	if (<%= v.name %>Exists || <%= v.name %> ) { [xml appendFormat:@"<<%= elementTag %><%= addAttrTxt %>>%@</<%= elementTag %>>", SAFESTRING(((<%= v.name %>Exists || <%= v.name %> ) ? (<%= v.name %> ? <%= boolTrue %> : <%= boolFalse %>) : NULL))]; }<%
	elseif (typeNameForItem(v) == "short") then
%>	if (<%= v.name %>Exists || <%= v.name %> ) { [xml appendFormat:@"<<%= elementTag %><%= addAttrTxt %>>%hi</<%= elementTag %>>", <%= v.name %>]; }<%
	elseif (typeNameForItem(v) == "int") then
%>	if (<%= v.name %>Exists || <%= v.name %> ) { [xml appendFormat:@"<<%= elementTag %><%= addAttrTxt %>>%i</<%= elementTag %>>", <%= v.name %>]; }<%
	elseif (typeNameForItem(v) == "long") then
%>	if (<%= v.name %>Exists || <%= v.name %> ) { [xml appendFormat:@"<<%= elementTag %><%= addAttrTxt %>>%ld</<%= elementTag %>>", <%= v.name %>]; }<%
	elseif (typeNameForItem(v) == "char") then
%>	if (<%= v.name %>Exists || <%= v.name %> ) { [xml appendFormat:@"<<%= elementTag %><%= addAttrTxt %>>%i</<%= elementTag %>>", <%= v.name %>]; }<%
	elseif (typeNameForItem(v) == "float" or typeNameForItem(v)=="double") then %>
	if (<%= v.name %>Exists || <%= v.name %> ) {
		NSString *s = [NSString stringWithFormat:@"%f", <%= v.name %>];
        [xml appendFormat:@"<<%= elementTag %><%= addAttrTxt %>>%@</<%= elementTag %>>", s];
    }
<% 	elseif (v.type == "date") then
%>	if (<%= v.name %>Exists || <%= v.name %> ) { [xml appendFormat:@"<<%= elementTag %><%= addAttrTxt %>>%@</<%= elementTag %>>", [self dateStringFromSchema:<%= v.name %>]]; }<%
    elseif (v.type == "dateTime") then
%>	if (<%= v.name %>Exists || <%= v.name %> ) { [xml appendFormat:@"<<%= elementTag %><%= addAttrTxt %>>%@</<%= elementTag %>>", [self dateTimeStringFromSchema:<%= v.name %>]]; }<%
    elseif (v.type == "base64Binary") then
%>	if (<%= v.name %>Exists || <%= v.name %> ) { [xml appendFormat:@"<<%= elementTag %><%= addAttrTxt %>>%@</<%= elementTag %>>", [<%= v.name %> base64Encoding]]; }<%
else
%>	if (<%= v.name %> && [<%= v.name %> isEqualToString:@"(null)"] == NO) { <%
        if (cdataize) then
    %>[xml appendFormat:@"<<%= elementTag %><%= addAttrTxt %>><%= cdataizeOpen%>%@<%= cdataizeClose%></<%= elementTag %>>", <%= v.name %>]; }<%
        else
    %>[xml appendFormat:@"<<%= elementTag %><%= addAttrTxt %>>%@</<%= elementTag %>>", SAFESTRING(<%= v.name %>)]; }<%
        end
	end
end	 
%>}

- (void) appendXML:(NSMutableString *)xml
{
	[self appendXML:xml useOriginalValues:false];
}

- (void) appendXML:(NSMutableString *)xml useOriginalValues:(BOOL)useOriginalValues
{
    <%
    local overrideNamespace = getStringValueForOverrideOnWriteOption("namespace");
    local overrideTag = getStringValueForOverrideOnWriteOption("tag");
    local lowercaseTag = getStringValueForOverrideOnWriteOption("lowercaseTag");
    local addAttribute = getStringValueForOverrideOnWriteOption("addAttribute");
    --print(overrideNamespace);
    --print(overrideTag);
    --print(lowercaseTag);

    local elementNamespace = this.namespaceURL;
    local elementTag = CAP_NAME;
    if (overrideNamespace ~= nil) then
        elementNamespace = overrideNamespace;
    end
    if (overrideTag ~= nil) then
        elementTag = overrideTag;
    end
    if (lowercaseTag == "true" or lowercaseTag == "1") then
        elementTag = string.lower(elementTag);
    end;
    
    %>
	[xml appendFormat:@"<<%= elementTag %>"];
	if (![[parent performSelector:@selector(xmlns)] isEqualToString:@"<%= elementNamespace %>"])
	{
		[xml appendFormat:@" xmlns='<%= elementNamespace %>'"];
	}
    <% if (addAttribute ~= nil) then %>
    [xml appendFormat:@" <%= addAttribute %>"];
    <% end %>
	[self appendXMLAttributesForSubclass:xml useOriginalValues:useOriginalValues];
	NSMutableString * elems = [NSMutableString string];
	[self appendXMLElementsForSubclass:elems useOriginalValues:useOriginalValues];
	if([elems length])
	{
		[xml appendFormat:@">"];
		[xml appendFormat:@"%@</<%= elementTag %>>", elems];
	}
	else
	{
		[xml appendFormat:@"/>"];
	}
}

- (NSString *) xmlns
{
	return @"<%= this.namespaceURL %>";
}

- (NSString *) translateToXMLSafeString:(NSString *)__value
{
	NSMutableString * string = [NSMutableString stringWithString:[__value description]];
	[string replaceOccurrencesOfString:@\"&\" withString:@\"&amp;\" options:NSLiteralSearch range:NSMakeRange(0, [string length])];
	[string replaceOccurrencesOfString:@\"<\" withString:@\"&lt;\" options:NSLiteralSearch range:NSMakeRange(0, [string length])];
	[string replaceOccurrencesOfString:@\">\" withString:@\"&gt;\" options:NSLiteralSearch range:NSMakeRange(0, [string length])];
	[string replaceOccurrencesOfString:@\"\\"\" withString:@\"&quot;\" options:NSLiteralSearch range:NSMakeRange(0, [string length])];
	[string replaceOccurrencesOfString:@\"'\" withString:@\"&apos;\" options:NSLiteralSearch range:NSMakeRange(0, [string length])];
	return string;
}

- (NSString *) description 
{ 
	NSMutableString * s = [NSMutableString string]; 
	[self appendXMLAttributesForSubclass:s]; 
	return [NSString stringWithFormat:@"<<%= CAP_NAME %>%@ />", s]; 
}

#define DECLARESTATIC_dateFormatter static NSDateFormatter* dateFormatter; static dispatch_once_t onceToken;dispatch_once(&onceToken, ^{ dateFormatter = [NSDateFormatter new]; [dateFormatter setCalendar:[[NSCalendar alloc] initWithCalendarIdentifier:NSGregorianCalendar]]; });
     
- (NSDate *) dateFromString:(NSString *)date_string
				 WithFormat:(NSString *)date_format
{
    DECLARESTATIC_dateFormatter;
    [dateFormatter setDateFormat:date_format];
    return [dateFormatter dateFromString:date_string];
}

- (NSDate *) schemaDateTimeFromString:(NSString *)date_string
{ 
	return [self dateFromString:date_string WithFormat:@"yyyy-MM-dd'T'HH:mm:ss'Z'"]; // yyyy-MM-dd HH:mm:ss
}

- (NSDate *) schemaDateFromString:(NSString *)date_string
{
	return [self dateFromString:date_string WithFormat:@"yyyy-MM-dd"];
}

- (NSString *) dateTimeStringFromSchema:(NSDate *)_date
{
    DECLARESTATIC_dateFormatter;
	[dateFormatter setDateFormat:@"yyyy-MM-dd'T'HH:mm:ss'Z'"]; // yyyy-MM-dd HH:mm:ss
	return [dateFormatter stringFromDate:_date];
}

- (NSString *) dateStringFromSchema:(NSDate *)_date
{ 
    DECLARESTATIC_dateFormatter;
	[dateFormatter setDateFormat:@"yyyy-MM-dd"];
	return [dateFormatter stringFromDate:_date];
}

@end
