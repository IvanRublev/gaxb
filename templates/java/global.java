<%
-- Copyright (c) 2012 Small Planet Digital, LLC
-- 
-- Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files 
-- (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, 
-- publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, 
-- subject to the following conditions:
-- 
-- The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
-- 
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
-- MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE 
-- FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-- WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 %>
<%
FULL_NAME_CAPS = "_"..string.upper(this.namespace).."_"
FULL_NAME_CAMEL = capitalizedString(this.namespace)
%>
//
// Autogenerated by gaxb at <%= os.date("%I:%M:%S %p on %x") %>
//

#ifndef <%= FULL_NAME_CAPS %>
#define <%= FULL_NAME_CAPS %>

<%
	-- includes for other header files
	for k,v in pairs(schema.elements) do
		gaxb_print("#import \""..className(v)..".h\"\n")
	end
%>

<%
	-- simpleType definitions, such as enums
	for k,v in pairs(schema.simpleTypes) do
		
		local appinfo = gaxb_xpath(v.xml, "./XMLSchema:annotation/XMLSchema:appinfo");
		local enums = gaxb_xpath(v.xml, "./XMLSchema:restriction/XMLSchema:enumeration");
		
		if(appinfo ~= nil) then
			appinfo = appinfo[1].content;
		end
		
		if(appinfo == "ENUM") then
			gaxb_print("enum\n{\n")
			for k,v in pairs(enums) do
				gaxb_print("\t"..v.attributes.value..",\n")
			end
			gaxb_print("}\n")
		end
		if(appinfo == "NAMED_ENUM") then
			gaxb_print("enum\n{\n")
			for k1,v1 in pairs(enums) do
				gaxb_print("\t"..v.name.."_"..v1.attributes.value..",\n")
			end
			gaxb_print("}\n")
		end
		if(appinfo == "ENUM_MASK") then
			local i = 1
			gaxb_print("enum\n{\n")
			for k,v in pairs(enums) do
				gaxb_print("\t"..v.attributes.value.." = "..i..",\n")
				i = i * 2;
			end
			gaxb_print("}\n")
		end
		if(appinfo == "TYPEDEF") then
			for k,v in pairs(enums) do
				gaxb_print("#define "..string.upper(v.attributes.value).." @\""..v.attributes.value.."\"\n")
			end
		end
		
	end
%>


#endif
