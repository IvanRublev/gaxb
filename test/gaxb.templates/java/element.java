<%
PACKAGE_NAME = this.namespace;
CLASS_NAME = this.name;
HEADER_NAME = this.name.."Base";

IMPORTS = {}

for k,v in pairs(this.attributes) do
	local t = typeForItem(v);
	if(t == "tVector2" or t == "tVector3" or t == "tVector4" or t == "tRect" or t == "tColor") then
		IMPORTS["import com.smallplanet.PlanetCore.Types."..t..";"] = true;
	end
end
for k,v in pairs(this.sequences) do
	local t = typeForItem(v);
	if(t == "tVector2" or t == "tVector3" or t == "tVector4" or t == "tRect" or t == "tColor") then
		IMPORTS["import com.smallplanet.PlanetCore.Types."..t..";"] = true;
	end
	if (v.name == "any" or isPlural(v)) then
		IMPORTS["import java.util.List;"] = true;
		IMPORTS["import java.util.ArrayList;"] = true;
	end
end
for k,v in pairs(this.appinfos) do
	local vcopy = v
	local pipepos = string.find(v, "|")
	if (pipepos ~= nil) then
		vcopy = string.sub(v, 0, pipepos-1)
	end
	IMPORTS[vcopy] = true;
end

%>//
// Autogenerated by gaxb at <%= os.date("%I:%M:%S %p on %x") %>
//

package com.smallplanet.<%= PACKAGE_NAME %>;

import java.lang.reflect.*;

<%
for k,v in pairs(IMPORTS) do
	gaxb_print(k.."\n");
end
%>

public class <%= HEADER_NAME %> extends <%= superclassForItem(this) %>
{
<% if ( not hasSuperclass(this) ) then %>
	public Object parent;
	
	protected boolean gaxb_new_called = false;
	protected boolean gaxb_close_called = false;
	
<% end %><%
	gaxb_print( string.format("\tpublic String xmlns = %q;\n", this.namespaceURL) );
%><%
	if (# this.attributes > 0) then
		gaxb_print("\n\t// attributes\n")
		for k,v in pairs(this.attributes) do
			gaxb_print("\tpublic "..typeForItem(v).." "..v.name..";\n")
			gaxb_print("\tpublic boolean "..v.name.."Exists;\n\n")
		end
	end
%><%
	if (# this.sequences > 0) then
		gaxb_print("\n\t// subelements\n")
		for k,v in pairs(this.sequences) do
			if (v.name == "any") then
				gaxb_print("\tpublic List<Object> anys = new ArrayList<Object>();\n")
			elseif(isPlural(v)) then
				gaxb_print("\tpublic List<Object> "..pluralName(v.name).." = new ArrayList<Object>();\n")
			else
				gaxb_print("\tpublic boolean "..v.name.."Exists;\n")
				gaxb_print("\tpublic "..typeForItem(v).." "..v.name..";\n\n")
			end
		end
	end
%><%
	if (# this.appinfos > 0) then
		gaxb_print("\n\t// appinfo declarations\n")
		for k,v in pairs(this.appinfos) do
			local vcopy = v
			local pipepos = string.find(v, "|")
			if (pipepos ~= nil) then
				vcopy = string.sub(v, pipepos+1)
			end
			gaxb_print("\t"..vcopy.."\n")
		end
	end
%>



<%
	if (# this.attributes > 0) then
		gaxb_print("\n\t// attributes\n")
		for k,v in pairs(this.attributes) do
			gaxb_print( string.format("\tpublic void set%s(String s) { gaxb_valueWillChange(%q); %s = %s; gaxb_valueDidChange(%q); }", 
									capitalizedString(v.name), v.name, v.name, parseCodeForItem(v), v.name) );
			gaxb_print("\t\n")
		end
	end
	
	if (# this.sequences > 0) then
		gaxb_print("\n\t// subelements\n")
		for k,v in pairs(this.sequences) do
			local s = "";
			if (v.name == "any") then
			elseif(isPlural(v)) then
			else
				gaxb_print( string.format("\tpublic void set%s(String s) { gaxb_valueWillChange(%q); %s = %s; gaxb_valueDidChange(%q); }", 
										capitalizedString(v.name), v.name, v.name, parseCodeForItem(v), v.name) );
				gaxb_print("\t\n")
			end
		end
	end
%>
	
<% if ( not hasSuperclass(this) ) then %>
	public Object valueForKey(String s)
	{
		try {
			Field field = getClass().getField(s);
			return field.get(this);
		} catch (Throwable t1) {
			try {
				Method method = getClass().getMethod(s);
				return method.invoke(this, new Object[0]);
			} catch (Throwable t2) {
				return null;
			}
		}
	}
<% end %>
	
<% if ( not hasSuperclass(this) ) then %>

	protected void close()
	{
		if(gaxb_close_called == false)
		{
			gaxb_close_called = true;
			gaxb_close();
		}
	}
	
	protected void finalize()
	{
		close();
	}
		
	// Overriden by subclasses
	public void gaxb_new()
	{
		
	}
	
	protected void gaxb_close()
	{
		
	}
	
	protected void gaxb_valueWillChange(String _name)
	{
		
	}
	
	protected void gaxb_valueDidChange(String _name)
	{
		
	}
<% end %>
	
}


