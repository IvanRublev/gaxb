<%
FULL_NAME_CAPS = "_"..string.upper(this.namespace).."_"..string.upper(this.name).."_";
FULL_NAME_CAMEL = capitalizedString(this.namespace).."_"..capitalizedString(this.name);
%>//
// Autogenerated by gaxb at <%= os.date("%I:%M:%S %p on %x") %>
//

#ifdef __IPHONE_OS_VERSION_MAX_ALLOWED
	#import <UIKit/UIKit.h>
#else
	#import <Cocoa/Cocoa.h>
#endif

<% -- check for ENUMs defined in other namespaces and load their XMLConstants as needed
local namespaces = {};
for k,v in pairs(this.attributes) do
	if (isEnumForItem(v) and v.type.namespace ~= nil and namespaces[v.type.namespace] == nil) then
		namespaces[v.type.namespace] = true;
		gaxb_print("#import \""..v.type.namespace.."_XMLConstants.h\"\n");
	end
end

if (hasSuperclass(this)) then %>#import "<%= superclassForItem(this) %>.h"

<% else gaxb_print("\n"); end

local classes = {}
for k,v in pairs(this.attributes) do
	--print("ATTRIBUTE "..table.tostring(v))
	if(type(v.type) == "table") then
		
		--print("table "..v.type.type)
		
		if (v.type.type == "simple") then
			-- table.insertIfNotPresent(classes,v.type.namespace..":"..v.type.name);
	
			local appinfo = gaxb_xpath(v.type.xml, "./XMLSchema:annotation/XMLSchema:appinfo/XMLSchema:objc");
			if(appinfo == nil) then
				appinfo = gaxb_xpath(v.type.xml, "./XMLSchema:annotation/XMLSchema:appinfo");
			end
			if(appinfo ~= nil and appinfo[1].content ~= "NAMED_ENUM") then
				table.insertIfNotPresent(classes,appinfo[1].content);
			end	
			
			-- local appinfo = gaxb_xpath(v.type.xml, "./XMLSchema:annotation/XMLSchema:appinfo");
			-- if(appinfo ~= nil) then
			-- 	print("appinfo XYZ = "..table.tostring(appinfo))
			-- 	table.insertIfNotPresent(classes,appinfo[1].content);
			-- end
		end

		t = v.type;
		if (t.type == "element") then
			table.insertIfNotPresent(classes,className(t));
		end
	end
end
for k,v in pairs(this.sequences) do
	if (isObject(v)) then
		table.insertIfNotPresent(classes,typeNameForItem(v));
	end
end
for k,v in pairs(this.appinfos) do
	local pipepos = string.find(v, "|")
	if (pipepos ~=nil) then
		table.insertIfNotPresent(classes,string.sub(v, 1, pipepos-1));
	end
end

table.sort(classes)
for k,v in pairs(classes) do
	if (v ~= superclassForItem(this)) then
		gaxb_print("@class "..v..";\n")
	end
end

%>
#ifndef SAFESTRING
	#define SAFESTRING(x) ([self translateToXMLSafeString:x])
#endif

@interface <%= FULL_NAME_CAMEL %> : <%= superclassForItem(this) %>
{<% if ( not hasSuperclass(this) ) then %>
	id parent;
	NSNumber * uid; 
	BOOL ocxb_init_called;
	BOOL ocxb_dealloc_called;
	
<% end %>	
	// Attributes
<%
	for k,v in pairs(this.attributes) do
		gaxb_print("\t"..typeForItem(v).." "..v.name..";\n")
		gaxb_print("\tBOOL "..v.name.."Exists;\n")
	end
	if (this.mixedContent == true) then
		gaxb_print("\tNSString *MixedContent;\n\tBOOL MixedContentExists;\n");
	end
%><%
	if (# this.sequences > 0) then
		gaxb_print("\n\t// Subelements\n")
		for k,v in pairs(this.sequences) do
			if (v.name == "any") then
				gaxb_print("\tNSMutableArray *anys;\n")
			elseif(isPlural(v)) then
				gaxb_print("\tNSMutableArray *"..pluralName(v.name)..";\n")
			else
				if(isObject(v)) then
					gaxb_print("\t"..typeNameForItem(v).." *"..v.name..";\n")
				else
					gaxb_print("\t"..typeForItem(v).." "..v.name..";\n")
				end
				gaxb_print("\tBOOL "..v.name.."Exists;\n")
			end
		end
	end
%><%
	if (# this.appinfos > 0) then
		gaxb_print("\n\t// Appinfo Declarations\n")
		for k,v in pairs(this.appinfos) do
			local vcopy = v
			local pipepos = string.find(v, "|")
			if (pipepos ~=nil) then
				vcopy = string.sub(v, pipepos+1)
			end
			gaxb_print("\t"..vcopy.."\n")
		end
	end
%>}
<% if ( not hasSuperclass(this) ) then %>
@property (nonatomic, assign) id parent;
@property (nonatomic, retain) NSNumber * uid;
<% end %>
<%
	for k,v in pairs(this.attributes) do
		gaxb_print("@property (nonatomic"..(isObject(v)==true and ", retain" or "")..") "..typeForItem(v).." "..v.name..";\n")
		gaxb_print("@property (nonatomic,readonly) BOOL "..v.name.."Exists;\n")
	end
	if (this.mixedContent == true) then
		gaxb_print("@property (nonatomic, retain) NSString *MixedContent;\n@property (nonatomic) BOOL MixedContentExists;\n");
	end
%>
<%
	for k,v in pairs(this.sequences) do
		if (v.name == "any") then
			gaxb_print("@property (nonatomic,retain) NSMutableArray * anys;\n")
		elseif(isPlural(v)) then
			gaxb_print("@property (nonatomic,retain) NSMutableArray * "..pluralName(v.name)..";\n")
		else
			gaxb_print("@property (nonatomic"..(isObject(v)==true and ", retain" or "")..") "..typeForItem(v).." "..v.name..";\n")
			gaxb_print("@property (nonatomic) BOOL "..v.name.."Exists;\n")
		end
	end 
%>
<%
	for k,v in pairs(this.attributes) do
		gaxb_print("- (NSString *) ".. v.name .."AsString;\n"); 
		gaxb_print("- (void) set"..capitalizedString(v.name).."WithString:(NSString *)string;\n")
	end
	for k,v in pairs(this.sequences) do
		if (v.name == "any") then
			gaxb_print("- (void) appendAnyWithString:(NSString *)string;\n")
		end
	end

if (hasSuperclass(this) == false) then %>
- (NSArray *) validAttributes;
- (NSString *) xmlns;

- (void) appendXML:(NSMutableString *)xml;
- (void) appendXMLAttributesForSubclass:(NSMutableString *)xml;
- (void) appendXMLElementsForSubclass:(NSMutableString *)xml;
- (NSString *) translateToXMLSafeString:(NSString *)__value;

- (id) ocxb_init;
- (void) ocxb_dealloc;
- (void) ocxb_valueWillChange:(NSString *)_name;
- (void) ocxb_valueDidChange:(NSString *)_name;
- (void) ocxb_loadDidComplete;
<% end %>
@end
