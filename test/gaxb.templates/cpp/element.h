<%
-- Copyright (c) 2012 Small Planet Digital, LLC
-- 
-- Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files 
-- (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, 
-- publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, 
-- subject to the following conditions:
-- 
-- The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
-- 
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
-- MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE 
-- FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-- WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 %>
<% -- C++ template
FULL_NAME_CAPS = "_"..string.upper(this.namespace).."_"..string.upper(this.name).."_";
CLASS_NAME = classNameWithNamespace(this.namespace, this.name);

IMPORTS = {}
FORWARDS = {}
for k,v in pairs(this.attributes) do
	local t = typeForItem(v);
	if(t == "tVector2*" or t == "tVector3*" or t == "tVector4*" or t == "tRect*" or t == "tColor*") then
		IMPORTS['#import "PlanetTypes.h"'] = true;
	else
		if (isObject(v)) then
			FORWARDS[classNameStripped(t)] = true;
		end
	end
end
for k,v in pairs(this.sequences) do
	local t = typeForItem(v);
	if(t == "tVector2*" or t == "tVector3*" or t == "tVector4*" or t == "tRect*" or t == "tColor*") then
		IMPORTS['#import "PlanetTypes.h"'] = true;
	else
		if (isObject(v)) then
			FORWARDS[classNameStripped(t)] = true;
		end
	end
end
for k,v in pairs(this.appinfos) do
	local vcopy = v
	local pipepos = string.find(v, "|")
	if (pipepos ~= nil) then
		vcopy = string.sub(v, 1, pipepos-1);
		FORWARDS[vcopy] = true;
	end
end

%>//
// Autogenerated by gaxb at <%= os.date("%I:%M:%S %p on %x") %>
//

#ifndef <%= FULL_NAME_CAPS %>H__
#define <%= FULL_NAME_CAPS %>H__

<%

for k,v in pairs(IMPORTS) do
	gaxb_print(k.."\n")
end
%>#import "cocos2d.h"

<%
for k,v in pairs(FORWARDS) do
	gaxb_print("class "..k..";\n")
end
%>

namespace smallplanet {

//const string <%= CLASS_NAME %>::xmlns = "<%= this.namespace %>";

class <%= CLASS_NAME %> : <%= superclassForItem(this) %> 
{
	public:
		<%= CLASS_NAME %>(void);
		~<%= CLASS_NAME %>(void);
	
	
<% if ( not hasSuperclass(this) ) then 
%>		cocos2d::CCObject* parent;
		bool gaxb_init_called;
		bool gaxb_dealloc_called;
	
<% end %>//		static const string xmlns;
<%
	if (# this.attributes > 0) then
		gaxb_print("\n\t\t// attributes\n")
		for k,v in pairs(this.attributes) do
			gaxb_print("\t\t"..typeForItem(v).." "..v.name..";\n")
			gaxb_print("\t\tbool "..v.name.."Exists;\n\n")
		end
	end
%><%
	if (# this.sequences > 0) then
		gaxb_print("\n\t\t// subelements\n")
		for k,v in pairs(this.sequences) do
			if (v.name == "any") then
				gaxb_print("\t\tcocos2d::CCArray *anys;\n")
			elseif(isPlural(v)) then
				gaxb_print("\t\tcocos2d::CCArray *"..pluralName(v.name)..";\n")
			else
				gaxb_print("\t\t"..typeForItem(v).." "..v.name..";\n\n")
				gaxb_print("\t\tbool "..v.name.."Exists;\n")
			end
		end
	end
%><%
	if (# this.appinfos > 0) then
		gaxb_print("\n\t\t// appinfo declarations\n")
		for k,v in pairs(this.appinfos) do
			local vcopy = v
			local pipepos = string.find(v, "|")
			if (pipepos ~= nil) then
				vcopy = string.sub(v, pipepos+1)
			end
			gaxb_print("\t\t"..vcopy.."\n")
		end
	end
%><% if ( not hasSuperclass(this) ) then %>
		cocos2d::CCObject* valueForKey(string s);
<% end 
if ( not hasSuperclass(this) ) then %>
		
		// Overriden by subclasses
		void gaxb_init();
		void gaxb_close();
		void gaxb_valueWillChange(String _name);
		void gaxb_valueDidChange(String _name);	
<% end %>}

} // end namespace

#endif
